<pre class='metadata'>
Title: Cross-root Aria Reflection
Shortname: cross-root-aria-reflection
Level: 1
Status: w3c/UD
Group: webcomponents
URL: https://westbrook.github.io/cross-root-aria-reflection/
Editor: Westbrook Johnson, Adobe http://www.adobe.com, westbrook.johnson@gmail.com, http://github.com/westbrook
Abstract: A shadowRoot reflection API to allow for ARIA attributes and properties set on a elements in a shadow root to be relfected to their host element.
</pre>

Introduction {#intro}
=====================

Content on the web being accessible is critically important. Maintaining accessibility within web components is challenging as the shadow root encapsulation prevents references between elements in different roots. These references are fundamental to enable assistive technologies within web applications.

Today, a web application can be composed by many web components that are connected through different relationships. ARIA is the appropriate standard to describe those relationships. Unfortunately, it's not possible to natively connect ARIA attributes from elements belonging to different DOM trees belonging to the main page and one or many web components. Because of that, some complex and not fully successful workarounds need to be applied.

- Observing and moving ARIA-related attributes across elements (for role, etc.).
- Using non-standard attributes for ARIA features, in order to apply them to elements in a shadow root.
- Requiring usage of custom elements to wrap/slot elements so that ARIA attributes can be placed directly on them. This gets very complicated as the number of slotted inputs and levels of shadow root nesting increase.
- Duplicating nodes across shadow root boundaries.
- Abandoning Shadow DOM.

<section class=informative>
  ## This proposal

  This proposal introduces a reflection API to allow for ARIA attributes and properties set on elements in a shadow root to be reflected into the parent DOM tree through their host element.

  This mechanism will allow users to apply standard best practices for ARIA and resolve a large margin of accessibility use cases for applications of native Web components and native Shadow DOM. This API is most suited for one-to-one delegation, but should also work for one-to-many scenarios. There is no mechanism for directly relating two elements in different shadowroots together, but this will still be possible manually with the element reflection API.

  The proposed extension adds a new `reflects*` (e.g.: `reflectsAriaLabel`, `reflectsAriaDescribedBy`) options to the `.attachShadow` method similarly to the `reflectsFocus`, while introducing a new content attribute `reflect*` (e.g.: `reflectarialabel`, `reflectariadescribedby`) to be used in the shadowroot inner elements. This has an advantage that it works with Declarative Shadow DOM as well, and it is consistent with `reflectsFocus`. Even though, it requires another set of html attributes in the declarative shadow root template. The declarative form works better with common developer paradigm where you may not necessarily have access to a DOM node right where you're creating / declaring it.

  <aside class="example" title="How to use it">
    
    The ARIA attributes assigned in the host x-foo are delegated to inner elements inside the component's shadowroot. Today, custom code can reflect this application but synthetically applying the aria attributes and their effects to both the host x-foo and its inner elements.
    
    <pre highlight="html">
      &lt;template id="template1">
        &lt;input id="input" reflectarialabel reflectariadescribedby />
        &lt;span reflectarialabel>Another target&lt;/span>
      &lt;/template>
      &lt;span id="foo">Description!&lt;/span>
      &lt;x-foo aria-label="Hello!" aria-describedby="foo">&lt;/x-foo>
    </pre>

    <pre highlight="js">
      const template = document.getElementById('template1');

      class XFoo extends HTMLElement {
        constructor() {
          super();
          this.attachShadow({ mode: "open", reflectsAriaLabel: true, reflectsAriaDescribedBy: true });
          this.shadowRoot.appendChild(template.content.cloneNode(true));
        }
      }
      customElements.define("x-foo", XFoo);
    </pre>

    For instance when delegating aria-label you want readers to know that it applies to the input, not both the input and the host. There are current workarounds include copying the attribute over and removing it from the host, but that introduces other problems.

    - <a href="https://glitch.com/edit/#!/delegation-via-attr?path=x-foo.js%3A24%3A0">Live example</a>
  </aside>

  <p class="ednote">The attributes names such as `shadowrootreflects*` are very long and some consideration for shorter names by removing the `shadowroot` prefix can be discussed as long the discussion is sync'ed with the stakeholders of the respective Declarative Shadow DOM proposal.</p>
</section>

# IDL Interface

Conforming user agents MUST implement the following IDL interface.

## Interface Mixin <dfn>ReflectARIAMixin</dfn>

<pre class="idl">
  interface mixin ReflectARIAMixin {
    attribute DOMString? reflectRole;
    attribute DOMString? reflectAriaActiveDescendantElement;
    attribute DOMString? reflectAriaAtomic;
    attribute DOMString? reflectAriaAutoComplete;
    attribute DOMString? reflectAriaBusy;
    attribute DOMString? reflectAriaChecked;
    attribute DOMString? reflectAriaColCount;
    attribute DOMString? reflectAriaColIndex;
    attribute DOMString? reflectAriaColIndexText;
    attribute DOMString? reflectAriaColSpan;
    attribute DOMString? reflectAriaControlsElements;
    attribute DOMString? reflectAriaCurrent;
    attribute DOMString? reflectAriaDescribedByElements;
    attribute DOMString? reflectAriaDescription;
    attribute DOMString? reflectAriaDetailsElements;
    attribute DOMString? reflectAriaDisabled;
    attribute DOMString? reflectAriaErrorMessageElement;
    attribute DOMString? reflectAriaExpanded;
    attribute DOMString? reflectAriaFlowToElements;
    attribute DOMString? reflectAriaHasPopup;
    attribute DOMString? reflectAriaHidden;
    attribute DOMString? reflectAriaInvalid;
    attribute DOMString? reflectAriaKeyShortcuts;
    attribute DOMString? reflectAriaLabel;
    attribute DOMString? reflectAriaLabelledByElements;
    attribute DOMString? reflectAriaLevel;
    attribute DOMString? reflectAriaLive;
    attribute DOMString? reflectAriaModal;
    attribute DOMString? reflectAriaMultiLine;
    attribute DOMString? reflectAriaMultiSelectable;
    attribute DOMString? reflectAriaOrientation;
    attribute DOMString? reflectAriaOwnsElements;
    attribute DOMString? reflectAriaPlaceholder;
    attribute DOMString? reflectAriaPosInSet;
    attribute DOMString? reflectAriaPressed;
    attribute DOMString? reflectAriaReadOnly;
    attribute DOMString? reflectAriaRequired;
    attribute DOMString? reflectAriaRoleDescription;
    attribute DOMString? reflectAriaRowCount;
    attribute DOMString? reflectAriaRowIndex;
    attribute DOMString? reflectAriaRowIndexText;
    attribute DOMString? reflectAriaRowSpan;
    attribute DOMString? reflectAriaSelected;
    attribute DOMString? reflectAriaSetSize;
    attribute DOMString? reflectAriaSort;
    attribute DOMString? reflectAriaValueMax;
    attribute DOMString? reflectAriaValueMin;
    attribute DOMString? reflectAriaValueNow;
    attribute DOMString? reflectAriaValueText;
  };
</pre>
    
Interfaces that include `ReflectARIAMixin` must provide the following algorithms:

- <dfn>`ReflectARIAMixin` getter steps</dfn>, which take the host interface instance, IDL attribute name, and content attribute name, and must return a string value; and
- <dfn>`ReflectARIAMixin` setter steps</dfn>, which take the host interface instance, IDL attribute name, content attribute name, and string value, and must return nothing.

For every IDL attribute <var>idlAttribute</var> defined in `ReflectARIAMixin`, on getting, it must perform the following steps:

1. Let <var>contentAttribute</var> be the ReflectARIA content attribute determined by looking up <var>idlAttribute</var> in the ReflectARIA Attribute Correspondence table.
1. Return the result of running the <a>`ReflectARIAMixin` getter steps</a>, given this, <var>idlAttribute</var>, and <var>contentAttribute</var>.

Similarly, on setting, it must perform the following steps:

1. Let <var>contentAttribute</var> be the ReflectARIA content attribute determined by looking up <var>idlAttribute</var> in the ReflectARIA Attribute Correspondence table.
1. Run the <a>`ReflectARIAMixin` setter steps</a>, given this, <var>idlAttribute</var>, <var>contentAttribute</var>, and the given value.

## ReflectARIA Attribute Correspondence

The following table provides a correspondence between IDL attribute names and content attribute names, for use by `ReflectARIAMixin`.

<table>
  <tr><th>IDL Attribute</th><th>Reflected ReflectARIA Content Attribute</th></tr>
  <tr><td><dfn>reflectRole</dfn></td><td><pref>reflectrole</pref></td></tr>
  <tr><td><dfn>reflectAriaActiveDescendantElement</dfn></td><td><pref>reflectariaactivedescendantelement</pref></td></tr>
  <tr><td><dfn>reflectAriaAtomic</dfn></td><td><pref>reflectariaatomic</pref></td></tr>
  <tr><td><dfn>reflectAriaAutoComplete</dfn></td><td><pref>reflectariaautocomplete</pref></td></tr>
  <tr><td><dfn>reflectAriaBusy</dfn></td><td><pref>reflectariabusy</pref></td></tr>
  <tr><td><dfn>reflectAriaChecked</dfn></td><td><pref>reflectariachecked</pref></td></tr>
  <tr><td><dfn>reflectAriaColCount</dfn></td><td><pref>reflectariacolcount</pref></td></tr>
  <tr><td><dfn>reflectAriaColIndex</dfn></td><td><pref>reflectariacolindex</pref></td></tr>
  <tr><td><dfn>reflectAriaColIndexText</dfn></td><td><pref>reflectariacolindextext</pref></td></tr>
  <tr><td><dfn>reflectAriaColSpan</dfn></td><td><pref>reflectariacolspan</pref></td></tr>
  <tr><td><dfn>reflectAriaControlsElements</dfn></td><td><pref>reflectariacontrolselements</pref></td></tr>
  <tr><td><dfn>reflectAriaCurrent</dfn></td><td><pref>reflectariacurrent</pref></td></tr>
  <tr><td><dfn>reflectAriaDescribedByElements</dfn></td><td><pref>reflectariadescribedbyelements</pref></td></tr>
  <tr><td><dfn>reflectAriaDescription</dfn></td><td><pref>reflectariadescription</pref></td></tr>
  <tr><td><dfn>reflectAriaDetailsElements</dfn></td><td><pref>reflectariadetailselements</pref></td></tr>
  <tr><td><dfn>reflectAriaDisabled</dfn></td><td><pref>reflectariadisabled</pref></td></tr>
  <tr><td><dfn>reflectAriaErrorMessageElement</dfn></td><td><pref>reflectariaerrormessageelement</pref></td></tr>
  <tr><td><dfn>reflectAriaExpanded</dfn></td><td><pref>reflectariaexpanded</pref></td></tr>
  <tr><td><dfn>reflectAriaFlowToElements</dfn></td><td><pref>reflectariaflowtoelements</pref></td></tr>
  <tr><td><dfn>reflectAriaHasPopup</dfn></td><td><pref>reflectariahaspopup</pref></td></tr>
  <tr><td><dfn>reflectAriaHidden</dfn></td><td><pref>reflectariahidden</pref></td></tr>
  <tr><td><dfn>reflectAriaInvalid</dfn></td><td><pref>reflectariainvalid</pref></td></tr>
  <tr><td><dfn>reflectAriaKeyShortcuts</dfn></td><td><pref>reflectariakeyshortcuts</pref></td></tr>
  <tr><td><dfn>reflectAriaLabel</dfn></td><td><pref>reflectarialabel</pref></td></tr>
  <tr><td><dfn>reflectAriaLabelledByElements</dfn></td><td><pref>reflectarialabelledbyelements</pref></td></tr>
  <tr><td><dfn>reflectAriaLevel</dfn></td><td><pref>reflectarialevel</pref></td></tr>
  <tr><td><dfn>reflectAriaLive</dfn></td><td><pref>reflectarialive</pref></td></tr>
  <tr><td><dfn>reflectAriaModal</dfn></td><td><pref>reflectariamodal</pref></td></tr>
  <tr><td><dfn>reflectAriaMultiLine</dfn></td><td><pref>reflectariamultiline</pref></td></tr>
  <tr><td><dfn>reflectAriaMultiSelectable</dfn></td><td><pref>reflectariamultiselectable</pref></td></tr>
  <tr><td><dfn>reflectAriaOrientation</dfn></td><td><pref>reflectariaorientation</pref></td></tr>
  <tr><td><dfn>reflectAriaOwnsElements</dfn></td><td><pref>reflectariaownselements</pref></td></tr>
  <tr><td><dfn>reflectAriaPlaceholder</dfn></td><td><pref>reflectariaplaceholder</pref></td></tr>
  <tr><td><dfn>reflectAriaPosInSet</dfn></td><td><pref>reflectariaposinset</pref></td></tr>
  <tr><td><dfn>reflectAriaPressed</dfn></td><td><pref>reflectariapressed</pref></td></tr>
  <tr><td><dfn>reflectAriaReadOnly</dfn></td><td><pref>reflectariareadonly</pref></td></tr>
  <tr><td><dfn>reflectAriaRequired</dfn></td><td><pref>reflectariarequired</pref></td></tr>
  <tr><td><dfn>reflectAriaRoleDescription</dfn></td><td><pref>reflectariaroledescription</pref></td></tr>
  <tr><td><dfn>reflectAriaRowCount</dfn></td><td><pref>reflectariarowcount</pref></td></tr>
  <tr><td><dfn>reflectAriaRowIndex</dfn></td><td><pref>reflectariarowindex</pref></td></tr>
  <tr><td><dfn>reflectAriaRowIndexText</dfn></td><td><pref>reflectariarowindextext</pref></td></tr>
  <tr><td><dfn>reflectAriaRowSpan</dfn></td><td><pref>reflectariarowspan</pref></td></tr>
  <tr><td><dfn>reflectAriaSelected</dfn></td><td><pref>reflectariaselected</pref></td></tr>
  <tr><td><dfn>reflectAriaSetSize</dfn></td><td><pref>reflectariasetsize</pref></td></tr>
  <tr><td><dfn>reflectAriaSort</dfn></td><td><pref>reflectariasort</pref></td></tr>
  <tr><td><dfn>reflectAriaValueMax</dfn></td><td><pref>reflectariavaluemax</pref></td></tr>
  <tr><td><dfn>reflectAriaValueMin</dfn></td><td><pref>reflectariavaluemin</pref></td></tr>
  <tr><td><dfn>reflectAriaValueNow</dfn></td><td><pref>reflectariavaluenow</pref></td></tr>
  <tr><td><dfn>reflectAriaValueText</dfn></td><td><pref>reflectariavaluetext</pref></td></tr>
</table>

## `ReflectARIAMixin` Mixed in to `Element`

User agents MUST include `ReflectARIAMixin` on `Element`:

<pre class="idl">
  Element includes ReflectARIAMixin;
</pre>

For `Element`:
  
- The <a>`ReflectARIAMixin` getter steps</a> given <var>element</var>, <var>idlAttribute</var>, and <var>contentAttribute</var> are to return the result of the getter algorithm for <var>idlAttribute</var> <a href="https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect">reflecting<<var>contentAttribute</var> on <var>element</var>.
- The <a>`ReflectARIAMixin` setter steps</a> given <var>element</var>, <var>idlAttribute</var>, <var>contentAttribute</var>, and <var>value</var> are to perform the setter algorithm for <var>idlAttribute</var> <a href="https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect">reflecting</a> <var>contentAttribute</var> on <var>element</var>, given <var>value</var>.

Note: In practice, this means that, e.g., the `reflectAriaAtomic` IDL on `Element` reflects the `reflectariaatomic` content attribute;

---

## Interface Mixin <dfn>ShadowRootMixin</dfn>

<pre class="idl">
  interface mixin ShadowRootMixin {
    attribute DOMString? reflectsRole;
    attribute DOMString? reflectsAriaActiveDescendantElement;
    attribute DOMString? reflectsAriaAtomic;
    attribute DOMString? reflectsAriaAutoComplete;
    attribute DOMString? reflectsAriaBusy;
    attribute DOMString? reflectsAriaChecked;
    attribute DOMString? reflectsAriaColCount;
    attribute DOMString? reflectsAriaColIndex;
    attribute DOMString? reflectsAriaColIndexText;
    attribute DOMString? reflectsAriaColSpan;
    attribute DOMString? reflectsAriaControlsElements;
    attribute DOMString? reflectsAriaCurrent;
    attribute DOMString? reflectsAriaDescribedByElements;
    attribute DOMString? reflectsAriaDescription;
    attribute DOMString? reflectsAriaDetailsElements;
    attribute DOMString? reflectsAriaDisabled;
    attribute DOMString? reflectsAriaErrorMessageElement;
    attribute DOMString? reflectsAriaExpanded;
    attribute DOMString? reflectsAriaFlowToElements;
    attribute DOMString? reflectsAriaHasPopup;
    attribute DOMString? reflectsAriaHidden;
    attribute DOMString? reflectsAriaInvalid;
    attribute DOMString? reflectsAriaKeyShortcuts;
    attribute DOMString? reflectsAriaLabel;
    attribute DOMString? reflectsAriaLabelledByElements;
    attribute DOMString? reflectsAriaLevel;
    attribute DOMString? reflectsAriaLive;
    attribute DOMString? reflectsAriaModal;
    attribute DOMString? reflectsAriaMultiLine;
    attribute DOMString? reflectsAriaMultiSelectable;
    attribute DOMString? reflectsAriaOrientation;
    attribute DOMString? reflectsAriaOwnsElements;
    attribute DOMString? reflectsAriaPlaceholder;
    attribute DOMString? reflectsAriaPosInSet;
    attribute DOMString? reflectsAriaPressed;
    attribute DOMString? reflectsAriaReadOnly;
    attribute DOMString? reflectsAriaRequired;
    attribute DOMString? reflectsAriaRoleDescription;
    attribute DOMString? reflectsAriaRowCount;
    attribute DOMString? reflectsAriaRowIndex;
    attribute DOMString? reflectsAriaRowIndexText;
    attribute DOMString? reflectsAriaRowSpan;
    attribute DOMString? reflectsAriaSelected;
    attribute DOMString? reflectsAriaSetSize;
    attribute DOMString? reflectsAriaSort;
    attribute DOMString? reflectsAriaValueMax;
    attribute DOMString? reflectsAriaValueMin;
    attribute DOMString? reflectsAriaValueNow;
    attribute DOMString? reflectsAriaValueText;
  };
</pre>

Interfaces that include `ShadowRootMixin` must provide the following algorithms:

- <dfn>`ShadowRootMixin` getter steps</dfn>, which take the host interface instance, IDL attribute name, and content attribute name, and must return a string value; and
- <dfn>`ShadowRootMixin` setter steps</dfn>, which take the host interface instance, IDL attribute name, content attribute name, and string value, and must return nothing.

For every IDL attribute <var>idlAttribute</var> defined in `ShadowRootMixin`, on getting, it must perform the following steps:

1. Let <var>contentAttribute</var> be the ReflectARIA content attribute determined by looking up <var>idlAttribute</var> in the ReflectARIA Attribute Correspondence table.
1. Return the result of running the <a>`ShadowRootMixin` getter steps</a>, given this, <var>idlAttribute</var>, and <var>contentAttribute</var>.

Similarly, on setting, it must perform the following steps:

1. Let <var>contentAttribute</var> be the ReflectARIA content attribute determined by looking up <var>idlAttribute</var> in the ReflectARIA Attribute Correspondence table.
1. Run the <a>`ShadowRootMixin` setter steps</a>, given this, <var>idlAttribute</var>, <var>contentAttribute</var>, and the given value.

## ShadowRoot Attribute Correspondence

The following table provides a correspondence between IDL attribute names and content attribute names, for use by `ShadowRootMixin`.

<table>
  <tr><th>IDL Attribute</th><th>Reflected ShadowRoot Content Attribute</th></tr>
  <tr><td><dfn>reflectsRole</dfn></td><td><pref>reflectsrole</pref></td></tr>
  <tr><td><dfn>reflectsAriaActiveDescendantElement</dfn></td><td><pref>reflectsariaactivedescendantelement</pref></td></tr>
  <tr><td><dfn>reflectsAriaAtomic</dfn></td><td><pref>reflectsariaatomic</pref></td></tr>
  <tr><td><dfn>reflectsAriaAutoComplete</dfn></td><td><pref>reflectsariaautocomplete</pref></td></tr>
  <tr><td><dfn>reflectsAriaBusy</dfn></td><td><pref>reflectsariabusy</pref></td></tr>
  <tr><td><dfn>reflectsAriaChecked</dfn></td><td><pref>reflectsariachecked</pref></td></tr>
  <tr><td><dfn>reflectsAriaColCount</dfn></td><td><pref>reflectsariacolcount</pref></td></tr>
  <tr><td><dfn>reflectsAriaColIndex</dfn></td><td><pref>reflectsariacolindex</pref></td></tr>
  <tr><td><dfn>reflectsAriaColIndexText</dfn></td><td><pref>reflectsariacolindextext</pref></td></tr>
  <tr><td><dfn>reflectsAriaColSpan</dfn></td><td><pref>reflectsariacolspan</pref></td></tr>
  <tr><td><dfn>reflectsAriaControlsElements</dfn></td><td><pref>reflectsariacontrolselements</pref></td></tr>
  <tr><td><dfn>reflectsAriaCurrent</dfn></td><td><pref>reflectsariacurrent</pref></td></tr>
  <tr><td><dfn>reflectsAriaDescribedByElements</dfn></td><td><pref>reflectsariadescribedbyelements</pref></td></tr>
  <tr><td><dfn>reflectsAriaDescription</dfn></td><td><pref>reflectsariadescription</pref></td></tr>
  <tr><td><dfn>reflectsAriaDetailsElements</dfn></td><td><pref>reflectsariadetailselements</pref></td></tr>
  <tr><td><dfn>reflectsAriaDisabled</dfn></td><td><pref>reflectsariadisabled</pref></td></tr>
  <tr><td><dfn>reflectsAriaErrorMessageElement</dfn></td><td><pref>reflectsariaerrormessageelement</pref></td></tr>
  <tr><td><dfn>reflectsAriaExpanded</dfn></td><td><pref>reflectsariaexpanded</pref></td></tr>
  <tr><td><dfn>reflectsAriaFlowToElements</dfn></td><td><pref>reflectsariaflowtoelements</pref></td></tr>
  <tr><td><dfn>reflectsAriaHasPopup</dfn></td><td><pref>reflectsariahaspopup</pref></td></tr>
  <tr><td><dfn>reflectsAriaHidden</dfn></td><td><pref>reflectsariahidden</pref></td></tr>
  <tr><td><dfn>reflectsAriaInvalid</dfn></td><td><pref>reflectsariainvalid</pref></td></tr>
  <tr><td><dfn>reflectsAriaKeyShortcuts</dfn></td><td><pref>reflectsariakeyshortcuts</pref></td></tr>
  <tr><td><dfn>reflectsAriaLabel</dfn></td><td><pref>reflectsarialabel</pref></td></tr>
  <tr><td><dfn>reflectsAriaLabelledByElements</dfn></td><td><pref>reflectsarialabelledbyelements</pref></td></tr>
  <tr><td><dfn>reflectsAriaLevel</dfn></td><td><pref>reflectsarialevel</pref></td></tr>
  <tr><td><dfn>reflectsAriaLive</dfn></td><td><pref>reflectsarialive</pref></td></tr>
  <tr><td><dfn>reflectsAriaModal</dfn></td><td><pref>reflectsariamodal</pref></td></tr>
  <tr><td><dfn>reflectsAriaMultiLine</dfn></td><td><pref>reflectsariamultiline</pref></td></tr>
  <tr><td><dfn>reflectsAriaMultiSelectable</dfn></td><td><pref>reflectsariamultiselectable</pref></td></tr>
  <tr><td><dfn>reflectsAriaOrientation</dfn></td><td><pref>reflectsariaorientation</pref></td></tr>
  <tr><td><dfn>reflectsAriaOwnsElements</dfn></td><td><pref>reflectsariaownselements</pref></td></tr>
  <tr><td><dfn>reflectsAriaPlaceholder</dfn></td><td><pref>reflectsariaplaceholder</pref></td></tr>
  <tr><td><dfn>reflectsAriaPosInSet</dfn></td><td><pref>reflectsariaposinset</pref></td></tr>
  <tr><td><dfn>reflectsAriaPressed</dfn></td><td><pref>reflectsariapressed</pref></td></tr>
  <tr><td><dfn>reflectsAriaReadOnly</dfn></td><td><pref>reflectsariareadonly</pref></td></tr>
  <tr><td><dfn>reflectsAriaRequired</dfn></td><td><pref>reflectsariarequired</pref></td></tr>
  <tr><td><dfn>reflectsAriaRoleDescription</dfn></td><td><pref>reflectsariaroledescription</pref></td></tr>
  <tr><td><dfn>reflectsAriaRowCount</dfn></td><td><pref>reflectsariarowcount</pref></td></tr>
  <tr><td><dfn>reflectsAriaRowIndex</dfn></td><td><pref>reflectsariarowindex</pref></td></tr>
  <tr><td><dfn>reflectsAriaRowIndexText</dfn></td><td><pref>reflectsariarowindextext</pref></td></tr>
  <tr><td><dfn>reflectsAriaRowSpan</dfn></td><td><pref>reflectsariarowspan</pref></td></tr>
  <tr><td><dfn>reflectsAriaSelected</dfn></td><td><pref>reflectsariaselected</pref></td></tr>
  <tr><td><dfn>reflectsAriaSetSize</dfn></td><td><pref>reflectsariasetsize</pref></td></tr>
  <tr><td><dfn>reflectsAriaSort</dfn></td><td><pref>reflectsariasort</pref></td></tr>
  <tr><td><dfn>reflectsAriaValueMax</dfn></td><td><pref>reflectsariavaluemax</pref></td></tr>
  <tr><td><dfn>reflectsAriaValueMin</dfn></td><td><pref>reflectsariavaluemin</pref></td></tr>
  <tr><td><dfn>reflectsAriaValueNow</dfn></td><td><pref>reflectsariavaluenow</pref></td></tr>
  <tr><td><dfn>reflectsAriaValueText</dfn></td><td><pref>reflectsariavaluetext</pref></td></tr>
</table>

## `ShadowRootMixin` Mixed in to `ShadowRoot`

User agents MUST include `ShadowRootMixin` on `ShadowRoot`:

<pre class="idl">
  ShadowRoot includes ShadowRootMixin;
</pre>

 For `ShadowRoot`:
  
- The <a>`ShadowRootMixin` getter steps</a> given <var>element</var>, <var>idlAttribute</var>, and <var>contentAttribute</var> are to return the result of the getter algorithm for <var>idlAttribute</var> <a href="https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect">reflecting<<var>contentAttribute</var> on <var>element</var>.
- The <a>`ShadowRootMixin` setter steps</a> given <var>element</var>, <var>idlAttribute</var>, <var>contentAttribute</var>, and <var>value</var> are to perform the setter algorithm for <var>idlAttribute</var> <a href="https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect">reflecting</a> <var>contentAttribute</var> on <var>element</var>, given <var>value</var>.

Note: In practice, this means that, e.g., the `reflectsAriaAtomic` IDL on `ShadowRoot` reflects the `reflectsariaatomic` content attribute; etc

## ShadowRootExtInit

<pre class="idl">
  [Exposed=Window]
  dictionary ShadowRootExtInit: ShadowRootInit {
    boolean reflectsRole = false;
    boolean reflectsAriaActiveDescendantElement = false;
    boolean reflectsAriaAtomic = false;
    boolean reflectsAriaAutoComplete = false;
    boolean reflectsAriaBusy = false;
    boolean reflectsAriaChecked = false;
    boolean reflectsAriaColCount = false;
    boolean reflectsAriaColIndex = false;
    boolean reflectsAriaColIndexText = false;
    boolean reflectsAriaColSpan = false;
    boolean reflectsAriaControlsElements = false;
    boolean reflectsAriaCurrent = false;
    boolean reflectsAriaDescribedByElements = false;
    boolean reflectsAriaDescription = false;
    boolean reflectsAriaDetailsElements = false;
    boolean reflectsAriaDisabled = false;
    boolean reflectsAriaErrorMessageElement = false;
    boolean reflectsAriaExpanded = false;
    boolean reflectsAriaFlowToElements = false;
    boolean reflectsAriaHasPopup = false;
    boolean reflectsAriaHidden = false;
    boolean reflectsAriaInvalid = false;
    boolean reflectsAriaKeyShortcuts = false;
    boolean reflectsAriaLabel = false;
    boolean reflectsAriaLabelledByElements = false;
    boolean reflectsAriaLevel = false;
    boolean reflectsAriaLive = false;
    boolean reflectsAriaModal = false;
    boolean reflectsAriaMultiLine = false;
    boolean reflectsAriaMultiSelectable = false;
    boolean reflectsAriaOrientation = false;
    boolean reflectsAriaOwnsElements = false;
    boolean reflectsAriaPlaceholder = false;
    boolean reflectsAriaPosInSet = false;
    boolean reflectsAriaPressed = false;
    boolean reflectsAriaReadOnly = false;
    boolean reflectsAriaRequired = false;
    boolean reflectsAriaRoleDescription = false;
    boolean reflectsAriaRowCount = false;
    boolean reflectsAriaRowIndex = false;
    boolean reflectsAriaRowIndexText = false;
    boolean reflectsAriaRowSpan = false;
    boolean reflectsAriaSelected = false;
    boolean reflectsAriaSetSize = false;
    boolean reflectsAriaSort = false;
    boolean reflectsAriaValueMax = false;
    boolean reflectsAriaValueMin = false;
    boolean reflectsAriaValueNow = false;
    boolean reflectsAriaValueText = false;
  };
</pre>

## attachShadow Signature

User agents MUST update the attachShadow method signature in the <code>Element</code> with the ShadowRootExtInit option, as the following:

<pre>
  ShadowRoot attachShadow(ShadowRootExtInit init);
</pre>

## attachShadow Extension

<p>The `attachShadow` method steps have their last 2 steps with:

<ol>
  <li><p>Set each attribute in the [[#reflects-correspondence]] table into <var>shadow</var> to the corresponding <var ignore="">init</var>[reflects attribute].

  <li><p>Set <a>this</a>'s <a for=Element>shadow root</a> to <var>shadow</var>.

  <li><p>Return <var>shadow</var>.
</ol>

### Reflects Aria Attribute Correspondence {#reflects-correspondence}

<table>
  <thead>
    <tr><th>Attribute</th><th>reflects</th></tr>
  </thead>
  <tbody>
    <tr><td>reflects ariaRole</td><td>reflectsRole</td></tr>
    <tr><td>reflects ariaAriaActiveDescendantElement</td><td>reflectsAriaActiveDescendantElement</td></tr>
    <tr><td>reflects ariaAriaAtomic</td><td>reflectsAriaAtomic</td></tr>
    <tr><td>reflects ariaAriaAutoComplete</td><td>reflectsAriaAutoComplete</td></tr>
    <tr><td>reflects ariaAriaBusy</td><td>reflectsAriaBusy</td></tr>
    <tr><td>reflects ariaAriaChecked</td><td>reflectsAriaChecked</td></tr>
    <tr><td>reflects ariaAriaColCount</td><td>reflectsAriaColCount</td></tr>
    <tr><td>reflects ariaAriaColIndex</td><td>reflectsAriaColIndex</td></tr>
    <tr><td>reflects ariaAriaColIndexText</td><td>reflectsAriaColIndexText</td></tr>
    <tr><td>reflects ariaAriaColSpan</td><td>reflectsAriaColSpan</td></tr>
    <tr><td>reflects ariaAriaControlsElements</td><td>reflectsAriaControlsElements</td></tr>
    <tr><td>reflects ariaAriaCurrent</td><td>reflectsAriaCurrent</td></tr>
    <tr><td>reflects ariaAriaDescribedByElements</td><td>reflectsAriaDescribedByElements</td></tr>
    <tr><td>reflects ariaAriaDescription</td><td>reflectsAriaDescription</td></tr>
    <tr><td>reflects ariaAriaDetailsElements</td><td>reflectsAriaDetailsElements</td></tr>
    <tr><td>reflects ariaAriaDisabled</td><td>reflectsAriaDisabled</td></tr>
    <tr><td>reflects ariaAriaErrorMessageElement</td><td>reflectsAriaErrorMessageElement</td></tr>
    <tr><td>reflects ariaAriaExpanded</td><td>reflectsAriaExpanded</td></tr>
    <tr><td>reflects ariaAriaFlowToElements</td><td>reflectsAriaFlowToElements</td></tr>
    <tr><td>reflects ariaAriaHasPopup</td><td>reflectsAriaHasPopup</td></tr>
    <tr><td>reflects ariaAriaHidden</td><td>reflectsAriaHidden</td></tr>
    <tr><td>reflects ariaAriaInvalid</td><td>reflectsAriaInvalid</td></tr>
    <tr><td>reflects ariaAriaKeyShortcuts</td><td>reflectsAriaKeyShortcuts</td></tr>
    <tr><td>reflects ariaAriaLabel</td><td>reflectsAriaLabel</td></tr>
    <tr><td>reflects ariaAriaLabelledByElements</td><td>reflectsAriaLabelledByElements</td></tr>
    <tr><td>reflects ariaAriaLevel</td><td>reflectsAriaLevel</td></tr>
    <tr><td>reflects ariaAriaLive</td><td>reflectsAriaLive</td></tr>
    <tr><td>reflects ariaAriaModal</td><td>reflectsAriaModal</td></tr>
    <tr><td>reflects ariaAriaMultiLine</td><td>reflectsAriaMultiLine</td></tr>
    <tr><td>reflects ariaAriaMultiSelectable</td><td>reflectsAriaMultiSelectable</td></tr>
    <tr><td>reflects ariaAriaOrientation</td><td>reflectsAriaOrientation</td></tr>
    <tr><td>reflects ariaAriaOwnsElements</td><td>reflectsAriaOwnsElements</td></tr>
    <tr><td>reflects ariaAriaPlaceholder</td><td>reflectsAriaPlaceholder</td></tr>
    <tr><td>reflects ariaAriaPosInSet</td><td>reflectsAriaPosInSet</td></tr>
    <tr><td>reflects ariaAriaPressed</td><td>reflectsAriaPressed</td></tr>
    <tr><td>reflects ariaAriaReadOnly</td><td>reflectsAriaReadOnly</td></tr>
    <tr><td>reflects ariaAriaRequired</td><td>reflectsAriaRequired</td></tr>
    <tr><td>reflects ariaAriaRoleDescription</td><td>reflectsAriaRoleDescription</td></tr>
    <tr><td>reflects ariaAriaRowCount</td><td>reflectsAriaRowCount</td></tr>
    <tr><td>reflects ariaAriaRowIndex</td><td>reflectsAriaRowIndex</td></tr>
    <tr><td>reflects ariaAriaRowIndexText</td><td>reflectsAriaRowIndexText</td></tr>
    <tr><td>reflects ariaAriaRowSpan</td><td>reflectsAriaRowSpan</td></tr>
    <tr><td>reflects ariaAriaSelected</td><td>reflectsAriaSelected</td></tr>
    <tr><td>reflects ariaAriaSetSize</td><td>reflectsAriaSetSize</td></tr>
    <tr><td>reflects ariaAriaSort</td><td>reflectsAriaSort</td></tr>
    <tr><td>reflects ariaAriaValueMax</td><td>reflectsAriaValueMax</td></tr>
    <tr><td>reflects ariaAriaValueMin</td><td>reflectsAriaValueMin</td></tr>
    <tr><td>reflects ariaAriaValueNow</td><td>reflectsAriaValueNow</td></tr>
    <tr><td>reflects ariaAriaValueText</td><td>reflectsAriaValueText</td></tr>
  </tbody>
</table>

  <section id="index" class="appendix">
    # Appendix 

    ## Original Threads

    - <a href="https://w3c.github.io/webcomponents-cg/#cross-root-aria">Public summary from WCCG</a>
    - <a href="https://github.com/WICG/aom/issues/169">WICG/aom#169</a>
    - <a href="https://github.com/WICG/aom/issues/107">WICG/aom#107</a>
    - <a href="https://github.com/WICG/webcomponents/issues/917">WICG/webcomponents#917</a>
    - <a href="https://github.com/WICG/webcomponents/issues/916">WICG/webcomponents#916</a>
  </section>
